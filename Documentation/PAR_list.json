{
    "P_simulations" : {
        "T"         : 100
        },
    "P_layer" : {
        "N_layers" : 4,
        "N_nodes" : 1024,
        "Layer_0" : {
            "type"  : "WS",
            "D"      : 2,
            "L"     : 32,
            "NFN"   : 4,
            "P"     : 0.02                 
        },
        "Layer_1" : {
            "type"  : "ER_m",
            "link_m"     : 16               
        },
        "Layer_2" : {
            "type"  : "ER_p",
            "p"     : 0.05               
        },
        "Layer_3" : {
            "type"          : "file",
            "namefile"      : "graph.txt"               
        }
    },
    "P_dynamic" : {
        "N" : 4,                                    
        "Dynamic_0" :{
            "func" : "SIRB_beta",
            "home_layer" : 0,                     
            "name" : "health_status",           
            "IC" : {                                                           
                "type" : "random",     
                "N_pat_zero" : 1
            },
            "read_SIRB_beta_behavior_from" : 0,
            "read_as_beh_for_SIRB_beta" : "behavior_status",
            "S2I_l" : 0,
            "S2I_h" : 0.2,
            "I2R"   : 0.1
        },
        "Dynamic_1" :{
            "func" : "SIRB_gamma",
            "home_layer" : 0,                     
            "name" : "health_status",           
            "IC" : {                                                           
                "type" : "random",     
                "N_pat_zero" : 1
            },
            "read_SIRB_gamma_behavior_from" : 0,
            "read_as_beh_for_SIRB_beta" : "behavior_status",
            "S2I"   : 0.1,
            "I2R_l" : 0.025,
            "I2R_h" : 0.175
        },
        "Dynamic_2" :{
            "func" : "SIRB_tau",
            "home_layer" : 0,                     
            "name" : "health_status",           
            "IC" : {                                                           
                "type" : "random",     
                "N_pat_zero" : 1
            },
            "read_SIRB_gamma_behavior_from" : 0,
            "read_as_beh_for_SIRB_beta" : "behavior_status",
            "S2I"   : 0.1,
            "tau_l" : 5,
            "tau_u" : 15
        },
        "Dynamic_3" : {
            "func" : "Static_Behavior",
            "home_layer" : 0,
            "name" : "behavior_status",
            "IC" : {
                    "type" : "random_beta",
                    "alpha" : 0.1,
                    "beta" : 0.1,
                    "homophily" : "False",
                    "homophily_target" : 0,
                    "homophily_step" : 10,
                    "homophily_precision": 1e-5
            }
        }
    },
    "P_recordings" :{
        "NOTES"                 : "if you are recording a single double per simulation no problem           : [value]",
        "NOTES2"                : "if you are recording the evolution of a double in time, no problem       : [v(t=0),   v(t=1),   v(t=2),   ...]",
        "NOTES3"                : "if you are recording a double for each node ONLY ONCE, no problem        : [v(node=0),v(node=1),v(node=2),...]",
        "NOTES4"                : "if you are recording a double for each node in time, TEST. Problems      : [???]",
        "NOTES5"                : "if you are saving a graph, problems! only the first one is saved, and it might overwrite stuff. If this will be needed, I'd to fix it.",
  
        "N" : 3,
        "Recording_0" : {
            "description"       : "saves the fraction of susceptibles (target fraction = 1), each time step (DT = 1), before the simulations (BEGIN = True)", 
            "description2"      : "and not after the end (END = False) reading from layer 0, The status of the node is read from the attribute health_status",
            "expected_result"   : "[s11, s21, s31, ...] // [s12, s22, s32, ...] // [s13, s23, s33, ...] // ...",
            "BEGIN"             : "True",
            "END"               : "False",
            "DT"                : 1,
            "func"              : "frac",
            "target_fraction"   : 1,
            "layer"             : 0,
            "target"            : "health_status",
            "filename"          : "fraction_of_susceptibles.txt"
        },
        "Recording_1" : {
            "description"       : "saves the fraction of infected (target fraction = 2), each time step (DT = 1), before the simulations (BEGIN = True)", 
            "description2"      : "and not after the end (END = False) reading from layer 0, The status of the node is read from the attribute health_status",
            "expected_result"   : "[i11, i21, i31, ...] // [i12, i22, i32, ...] // [i13, i23, i33, ...] // ...",
            "BEGIN"             : "True",
            "END"               : "False",
            "DT"                : 1,
            "func"              : "frac",
            "target_fraction"   : 2,
            "layer"             : 0,
            "target"            : "health_status",
            "filename"          : "fraction_of_infected.txt"
        },
        "Recording_2" : {
            "description"       : "saves the fraction of recovered (target fraction = 3), each time step (DT = 1), before the simulations (BEGIN = True)", 
            "description2"      : "and not after the end (END = False) reading from layer 0, The status of the node is read from the attribute health_status",
            "expected_result"   : "[r11, r21, r31, ...] // [r12, r22, r32, ...] // [r13, r23, r33, ...] // ...",
            "BEGIN"             : "True",
            "END"               : "False",
            "DT"                : 1,
            "func"              : "frac",
            "target_fraction"   : 3,
            "layer"             : 0,
            "target"            : "health_status",
            "filename"          : "fraction_of_recovered.txt"
        },
        "Recording_3" : {
            "expected_result"   : "[D11, D21, D31, ...] // [D12, D22, D32, ...] // [D13, D23, D33, ...] // ...",
            "BEGIN"             : "False",
            "END"               : "True",
            "DT"                : 0,
            "func"              : "ALL",
            "layer"             : 0,
            "target"            : "health_status",
            "filename"          : "all_disease.txt"
        },
        "Recording_4" : {
            "expected_result"   : "[B11, B21, B31, ...] // [B12, B22, B32, ...] // [B13, B23, B33, ...] // ...",
            "BEGIN"             : "False",
            "END"               : "True",
            "DT"                : 0,
            "func"              : "ALL",
            "layer"             : 0,
            "target"            : "behavior_status",
            "filename"          : "all_behavior.txt"
        },
        "Recording_5" : {
            "expected_result"   : "[mean11, mean21, mean31, ...] // [mean12, mean22, mean32, ...] // [mean13, mean23, mean33, ...] // ...",
            "BEGIN"             : "True",
            "END"               : "False",
            "DT"                : 1,
            "func"              : "mean",
            "target_fraction"   : 3,
            "layer"             : 0,
            "target"            : "behavior_status",
            "filename"          : "average_behavior.txt"
        },
        "Recording_6" : {
            "expected_result"   : "[median11, median21, median31, ...] // [median12, median22, median32, ...] // [median13, median23, median33, ...] // ...",
            "BEGIN"             : "True",
            "END"               : "False",
            "DT"                : 1,
            "func"              : "median",
            "target_fraction"   : 3,
            "layer"             : 0,
            "target"            : "behavior_status",
            "filename"          : "median_behavior.txt"
        },
        "Recording_7" : {
            "expected_result"   : "[var11, var21, var31, ...] // [var12, var22, var32, ...] // [var13, var23, var33, ...] // ...",
            "BEGIN"             : "True",
            "END"               : "False",
            "DT"                : 1,
            "func"              : "var",
            "target_fraction"   : 3,
            "layer"             : 0,
            "target"            : "behavior_status",
            "filename"          : "variance_behavior.txt"
        },
        "Recording_8" : {
            "expected_result"   : "[max11, max21, max31, ...] // [max12, max22, max32, ...] // [max13, max23, max33, ...] // ...",
            "BEGIN"             : "True",
            "END"               : "False",
            "DT"                : 1,
            "func"              : "max",
            "target_fraction"   : 3,
            "layer"             : 0,
            "target"            : "behavior_status",
            "filename"          : "max_behavior.txt"
        },
        "Recording_9" : {
            "expected_result"   : "[min11, min21, min31, ...] // [min12, min22, min32, ...] // [min13, min23, min33, ...] // ...",
            "BEGIN"             : "True",
            "END"               : "False",
            "DT"                : 1,
            "func"              : "min",
            "target_fraction"   : 3,
            "layer"             : 0,
            "target"            : "behavior_status",
            "filename"          : "min_behavior.txt"
        },
        "Recording_10" : {
            "description"       : "the histogram of the behavior is a vector for each time it's calculated. if you want to use it more than once per run, check how it is saved.",
            "expected_result"   : "[hist11, hist21, hist31, ...] // [hist12, hist22, hist32, ...] // [hist13, hist23, hist33, ...] // ...",
            "BEGIN"             : "False",
            "END"               : "True",
            "DT"                : 0,
            "func"              : "histogram",
            "target_fraction"   : 3,
            "layer"             : 0,
            "target"            : "behavior_status",
            "filename"          : "histogram_behavior.txt"
        },
        "Recording_11" : {
            "expected_result"   : "[hom11, hom21, hom31, ...] // [hom12, hom22, hom32, ...] // [hom13, hom23, hom33, ...] // ...",
            "BEGIN"             : "True",
            "END"               : "False",
            "DT"                : 1,
            "func"              : "homophily",
            "target_fraction"   : 3,
            "layer"             : 0,
            "target"            : "behavior_status",
            "filename"          : "homophily_behavior.txt"
        },
        "Recording_12" : {
            "description"       : "This returns a vector of fraction of infected neighbors each time it's called. if you want to use it more than once per run, check how it is saved.",
            "expected_result"   : "[frl11, frl21, frl31, ...] // [frl12, frl22, frl32, ...] // [frl13, frl23, frl33, ...] // ...",
            "BEGIN"             : "False",
            "END"               : "True",
            "DT"                : 0,
            "func"              : "fr_local",
            "target_fraction"   : 3,
            "layer"             : 0,
            "target"            : "behavior_status",
            "filename"          : "fr_local_behavior.txt"
        },
        "Recording_13" : {
            "description"       : "This returns ONE graph. the one in the layer LAYER. I don't need it now, so I don't know what happens if you want to save more than one graph.",
            "expected_result"   : "igraph stuff",
            "BEGIN"             : "False",
            "END"               : "True",
            "DT"                : 0,
            "func"              : "graph",
            "layer"             : 0,
            "filename"          : "graph_layer_0.txt"
        }

    }
}
